openapi: 3.0.0
info:
  title: Escrow Agent API
  description: API for managing escrow transactions.
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /login:
    post:
      summary: Logs in a user
      description: Authenticates a user and returns a JWT token.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid username or password

  /register:
    post:
      summary: Registers a new user
      description: Registers a new user and returns success status.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Successful signup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid signup data

  /api/profile:
    get:
      summary: Get the logged-in user's profile
      description: Returns the profile information of the authenticated user.
      tags:
        - profile
      responses:
        '200':
          description: Profile information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '404':
          description: User not found
        '500':
          description: Server error
      security:
        - BearerAuth: []

    put:
      summary: Update the logged-in user's profile
      description: Allows the authenticated user to update their profile information (username, password, and role).
      tags:
        - profile
      requestBody:
        description: Fields to update in the user's profile (only the fields that need updating should be included)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username
                  example: new_username
                password:
                  type: string
                  description: New password (will be securely hashed before storing)
                  example: new_password
                role:
                  type: string
                  description: The user's new role (admin, buyer, or seller)
                  example: admin
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
        '400':
          description: Bad request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '500':
          description: Internal server error
      security:
        - BearerAuth: []

  /api/transactions:
    post:
      summary: Create a new transaction (by buyer)
      description: Allows a buyer to create a new transaction by specifying the seller, amount, and status.
      tags:
        - transactions
      requestBody:
        description: Information required to create a new transaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seller_id:
                  type: integer
                  description: The ID of the seller
                  example: 2
                amount:
                  type: number
                  format: float
                  description: The transaction amount
                  example: 500.00
                status:
                  type: string
                  description: The status of the transactio, defaults to pending
                  example: pending
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Bad request (missing or invalid input data)
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '500':
          description: Internal server error
      security:
        - BearerAuth: []

    get:
      summary: Get a list of all transactions for the logged-in user (buyer/seller)
      description: Returns a list of transactions where the logged-in user is either the buyer or the seller.
      tags:
        - transactions
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '500':
          description: Internal server error
      security:
        - BearerAuth: []

  /api/transactions/{id}:
      get:
        summary: Get details of a specific transaction
        description: Returns the details of a specific transaction by its ID.
        tags:
          - transactions
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
            description: The ID of the transaction
        responses:
          '200':
            description: Transaction retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Transaction'
          '400':
            description: Invalid transaction ID
          '401':
            description: Unauthorized - Invalid or missing JWT token
          '404':
            description: Transaction not found
          '500':
            description: Internal server error
        security:
          - BearerAuth: []

  /api/transactions/{id}/fulfill:
    put:
      summary: Mark a transaction as fulfilled (by seller)
      description: Allows the seller to mark a transaction as fulfilled.
      tags:
        - transactions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the transaction
      responses:
        '200':
          description: Transaction marked as fulfilled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction marked as fulfilled
        '400':
          description: Bad request (invalid transaction status)
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '404':
          description: Transaction not found
        '500':
          description: Internal server error
      security:
        - BearerAuth: []

  /api/transactions/{id}/confirm:
    put:
      summary: Confirm the delivery of a product or service (by buyer)
      description: Allows the buyer to confirm the delivery of a product or service.
      tags:
        - transactions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the transaction
      responses:
        '200':
          description: Transaction confirmed by buyer
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction confirmed by buyer
        '400':
          description: Bad request (invalid transaction status)
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '404':
          description: Transaction not found
        '500':
          description: Internal server error
      security:
        - BearerAuth: []

  /api/escrow/{id}/deposit:
    post:
      summary: Deposit funds into escrow for a transaction (by buyer)
      description: Allows the buyer to deposit funds into escrow for a transaction.
      tags:
        - escrow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the transaction
      requestBody:
        description: The amount to be deposited into escrow
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: The amount to be deposited into escrow
                  example: 500.00
      responses:
        '200':
          description: Escrow deposit successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Escrow deposit successful
                  escrow_id:
                    type: integer
                    example: 1
        '400':
          description: Bad request (invalid transaction or amount)
        '401':
          description: Unauthorized - Invalid or missing JWT token
        '404':
          description: Transaction not found
        '500':
          description: Internal server error
      security:
        - BearerAuth: []

  /api/escrow/{id}/release:
    put:
      summary: Release funds from escrow to the seller
      description: This endpoint releases the escrowed funds to the seller. Only admin or system can perform this operation.
      tags:
        - escrow
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the transaction to release funds for
          schema:
            type: integer
      responses:
        '200':
          description: Funds successfully released to the seller
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Funds successfully released to the seller"
        '400':
          description: Bad request - Invalid transaction status or other validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot release funds for this transaction"
        '404':
          description: Not Found - Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transaction not found"
        '500':
          description: Server error - An error occurred while processing the request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to release funds from escrow"
      security:
        - BearerAuth: []

  /api/logs/{transaction_id}:
    get:
      summary: Get a list of all logs for a specific transaction
      description: Retrieves a list of logs associated with a specific transaction.
      tags:
        - Logs
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: The ID of the transaction to retrieve logs for
          schema:
            type: integer
      responses:
        '200':
          description: A list of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionLog'
        '400':
          description: Invalid transaction ID
        '500':
          description: Failed to fetch logs
      security:
        - BearerAuth: []

  /api/admin/users:
    get:
      summary: Get a list of all users
      description: Returns a list of all users in the system. Admin-only access.
      tags:
        - Admin
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Admin-only access
      security:
        - BearerAuth: []

  /api/admin/users/{id}:
    get:
      summary: Get details of a specific user
      description: Returns details of a specific user by ID. Admin-only access.
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid user ID"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        '401':
          description: Unauthorized - Admin-only access
      security:
        - BearerAuth: []


  /api/admin/transactions:
    get:
      summary: Get a list of all transactions
      description: Returns a list of all transactions in the system. Admin-only access.
      tags:
        - Admin
      responses:
        '200':
          description: A list of all transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized - Admin-only access
      security:
        - BearerAuth: []

  /api/upload:
    post:
      summary: Uploads a file
      description: Uploads a file for escrow documents.
      tags:
        - fileupload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: Bad request (e.g., missing transaction ID or file)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction ID is required
        '500':
          description: Internal server error (e.g., failed to upload file or save metadata)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to upload file
      security:
        - BearerAuth: []

  /api/customer:
    post:
      summary: Creates a new customer
      description: Adds a new customer to the escrow system.
      tags:
        - customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
        '400':
          description: Invalid customer data
      security:
        - BearerAuth: []

components:

  securitySchemes:
    BearerAuth:  
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
      required:
        - username
        - password
        - role

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "chauchausoup"
        role:
          type: string
          example: "buyer, seller, admin"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T15:23:45Z"

    CreateEscrowRequest:
      type: object
      properties:
        buyer_id:
          type: string
          description: "ID of the buyer"
        seller_id:
          type: string
          description: "ID of the seller"
        amount:
          type: number
          format: float
          description: "Amount for the escrow"
        description:
          type: string
          description: "Description of the escrow transaction"
      required:
        - buyer_id
        - seller_id
        - amount
        - description

    CreateEscrowResponse:
      type: object
      properties:
        escrow_id:
          type: string
          description: "The ID of the newly created escrow transaction"
        status:
          type: string
          description: "The current status of the escrow"
        created_at:
          type: string
          format: date-time
          description: "The creation time of the escrow"

    PendingEscrowResponse:
      type: object
      properties:
        escrow_id:
          type: string
          description: "The ID of the escrow transaction"
        buyer_id:
          type: string
          description: "The ID of the buyer"
        seller_id:
          type: string
          description: "The ID of the seller"
        amount:
          type: number
          description: "The amount of the escrow transaction"
        status:
          type: string
          description: "The current status of the escrow"
        created_at:
          type: string
          format: date-time
          description: "The creation time of the escrow"
        description:
          type: string
          description: "Description of the escrow transaction"

    DisputedEscrowResponse:
      type: object
      properties:
        escrow_id:
          type: string
          description: "The ID of the disputed escrow transaction"
        buyer_id:
          type: string
          description: "The ID of the buyer"
        seller_id:
          type: string
          description: "The ID of the seller"
        amount:
          type: number
          description: "The amount of the escrow transaction"
        status:
          type: string
          description: "The current status of the escrow, which is 'disputed'"
        created_at:
          type: string
          format: date-time
          description: "The creation time of the escrow"
        description:
          type: string
          description: "Description of the escrow transaction"

    ReleaseFundsResponse:
      type: object
      properties:
        message:
          type: string
          example: "Funds released successfully"
        escrow_id:
          type: string
          description: "The ID of the escrow that was released"
        status:
          type: string
          example: "released"
          description: "The new status of the escrow after releasing the funds"
        released_at:
          type: string
          format: date-time
          description: "The timestamp of when the funds were released"

    DisputeEscrowResponse:
      type: object
      properties:
        message:
          type: string
          example: "Dispute filed successfully"
        escrow_id:
          type: string
          description: "The ID of the escrow that was disputed"
        status:
          type: string
          example: "disputed"
          description: "The new status of the escrow after the dispute"
        disputed_at:
          type: string
          format: date-time
          description: "The timestamp of when the dispute was filed"
          
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid escrow ID or escrow not in pending state"

    UploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        transactionID:
          type: string
          description: The ID of the transaction to associate the file with.
          example: 12345
      required:
        - file
        - transactionID

    CreateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - name
        - email
        - phone

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "admin_user"
        role:
          type: string
          example: "admin"
        created_at:
          type: string
          format: date-time
          example: "2024-10-03T10:00:00Z"

    Transaction:
      type: object
      properties:
        transaction_id:
          type: integer
          example: 1
        buyer_id:
          type: integer
          example: 2
        seller_id:
          type: integer
          example: 3
        amount:
          type: number
          format: float
          example: 100.50
        status:
          type: string
          example: "in_progress"
        created_at:
          type: string
          format: date-time
          example: "2024-10-03T10:00:00Z"


    TransactionLog:
      type: object
      properties:
        log_id:
          type: integer
          example: 1
        transaction_id:
          type: integer
          example: 123
        event_type:
          type: string
          example: "TransactionCreated"
        event_details:
          type: string
          example: "{\"message\": \"Transaction created by buyer\"}"
        created_at:
          type: string
          format: date-time
          example: "2024-10-03T10:00:00Z"